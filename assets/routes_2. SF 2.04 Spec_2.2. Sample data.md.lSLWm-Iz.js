import{_ as a,c as s,o as i,a3 as t}from"./chunks/framework.z7kdJ_yr.js";const m=JSON.parse('{"title":"Sample data","description":"","frontmatter":{"prev":{"text":"2.1. SF 2.04 Spec","link":"/routes/2.%20SF%202.04%20Spec/2.1.%20Metadata.html"},"next":{"text":"2.3. Preset data","link":"/routes/2.%20SF%202.04%20Spec/2.3.%20Preset%20data.html"}},"headers":[],"relativePath":"routes/2. SF 2.04 Spec/2.2. Sample data.md","filePath":"routes/2. SF 2.04 Spec/2.2. Sample data.md","lastUpdated":1719160364000}'),e={name:"routes/2. SF 2.04 Spec/2.2. Sample data.md"},l=t('<h1 id="sample-data" tabindex="-1">Sample data <a class="header-anchor" href="#sample-data" aria-label="Permalink to &quot;Sample data&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">Prerequisite</p><p>This section requires a <a href="/routes/2. SF 2.04 Spec/README.html">basic understanding of SoundFont 2.04</a> and binary.</p></div><p>SoundFont sample data is accessible through <code>SoundFont3.sampleData</code>.</p><ul><li>Samples are WAV files in linear <a href="https://en.wikipedia.org/wiki/Pulse-code_modulation" target="_blank" rel="noreferrer">PCM</a> format.</li><li>Each sample is padded with at least 46 bytes in between.</li><li>Sample must loop so end point value matches start point value.</li></ul><h2 id="smpl-16-bit-wav" tabindex="-1"><code>smpl</code> - 16-bit WAV <a class="header-anchor" href="#smpl-16-bit-wav" aria-label="Permalink to &quot;`smpl` - 16-bit WAV&quot;">​</a></h2><p>Accessible through <code>SoundFont3.sampleData</code></p><p>WAV file in 16 bit signed little endian (least significant byte first).</p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int16_t[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soundFontVersionMajor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // Multiple 2 byte</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zeroPadding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &gt;= 46 byte</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Even number of byte total</span></span></code></pre></div><h2 id="sm24-plus-8-bit-wav" tabindex="-1"><code>sm24</code> - Plus 8-bit WAV <a class="header-anchor" href="#sm24-plus-8-bit-wav" aria-label="Permalink to &quot;`sm24` - Plus 8-bit WAV&quot;">​</a></h2><p>If 24-bit WAV is provided. The additional 8 bit detail is stored in this chunk. Chunk size should be 1/2 of <code>smpl</code></p><div class="language-C vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">C</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int8_t[]</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> soundFontVersionMajor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ...</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> zeroPadding </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // &gt;= 46 byte</span></span>\n<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Even number of byte total</span></span></code></pre></div>',11),n=[l];function p(h,d,o,r,c,k){return i(),s("div",null,n)}const b=a(e,[["render",p]]);export{m as __pageData,b as default};
