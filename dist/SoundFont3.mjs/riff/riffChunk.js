import{ChunkIterator as t}from"./chunkIterator.js";import{getStringFromBuffer as e}from"./utils.js";var r=Object.defineProperty,i=(t,e,i)=>((t,e,i)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):t[e]=i)(t,"symbol"!=typeof e?e+"":e,i);class s{constructor(t,e,r,s){i(this,"id"),i(this,"length"),i(this,"buffer"),i(this,"subChunks"),this.id=t,this.length=e,this.buffer=r,this.subChunks=s}getString(t=0,r){return e(this.getBuffer(t,r||this.length-t))}getInt16(t=0){return this.buffer[t++]|this.buffer[t]<<8}getUInt32(t=0){return(this.buffer[t++]|this.buffer[t++]<<8|this.buffer[t++]<<16|this.buffer[t]<<24)>>>0}getByte(t=0){return this.buffer[t]}getChar(t=0){return this.buffer[t]<<24>>24}iterator(e=0){return new t(this,e)}iterate(e,r=0){const i=new t(this,r);return i.iterate(e),i.target}getBuffer(t,e){return this.buffer.subarray(t,t+e)}}export{s as RIFFChunk};
//# sourceMappingURL=riffChunk.js.map
