{"version":3,"file":"instruments.js","sources":["../../../src/chunks/instruments.ts"],"sourcesContent":["import { SF2Chunk } from '../chunk'\nimport { ParseError } from '../riff'\nimport { SF_INSTRUMENT_HEADER_SIZE } from '../constants'\nimport { InstrumentHeader } from '../types'\n\n/**\n * Get all instrument headers from a `inst` sub-chunk.\n *\n * @param {SF2Chunk} chunk - The input chunk\n */\nexport const getInstrumentHeaders = (chunk: SF2Chunk): InstrumentHeader[] => {\n  if (chunk.id !== 'inst') {\n    throw new ParseError('Unexpected chunk ID', `'inst'`, `'${chunk.id}'`)\n  }\n\n  if (chunk.length % SF_INSTRUMENT_HEADER_SIZE) {\n    throw new ParseError(`Invalid size for the 'inst' sub-chunk`)\n  }\n\n  return chunk.iterate<InstrumentHeader>((iterator) => {\n    return {\n      name: iterator.getString(),\n      bagIndex: iterator.getInt16()\n    }\n  })\n}\n"],"names":["getInstrumentHeaders","chunk","id","ParseError","length","SF_INSTRUMENT_HEADER_SIZE","iterate","iterator","name","getString","bagIndex","getInt16"],"mappings":"+GAUa,MAAAA,EAAwBC,IAC/B,GAAa,SAAbA,EAAMC,GACR,MAAM,IAAIC,EAAW,sBAAuB,SAAU,IAAIF,EAAMC,OAG9D,GAAAD,EAAMG,OAASC,EACX,MAAA,IAAIF,EAAW,yCAGhB,OAAAF,EAAMK,SAA2BC,IAC/B,CACLC,KAAMD,EAASE,YACfC,SAAUH,EAASI,cAEtB"}