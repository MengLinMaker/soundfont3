import{ParseError as e}from"../../riff/parseError.js";import{SF_BAG_SIZE as t}from"../../constants.js";import{GeneratorType as n}from"../../types/generator.js";import"../../types/modulator.js";const r=(n,r)=>{if(n.id!==r)throw new e("Unexpected chunk ID",`'${r}'`,`'${n.id}'`);if(n.length%t)throw new e(`Invalid size for the '${r}' sub-chunk`);return n.iterate((e=>({generatorIndex:e.getInt16(),modulatorIndex:e.getInt16()})))},o=(e,t,r,o,g,d)=>{const l=[];for(let u=0;u<e.length;u++){const c=e[u],i=e[u+1],f=c.bagIndex,h=i?i.bagIndex:t.length,m=[];let I;for(let e=f;e<h;e++){const l=s(e,t,r),u=a(e,t,o),c=u[n.KeyRange]&&u[n.KeyRange].range,i=u[d];if(!i){e-f==0&&(I={keyRange:c,modulators:l,generators:u});continue}const h=g[i.value];h&&m.push({keyRange:c,modulators:l,generators:u,reference:h})}l.push({header:c,globalZone:I,zones:m})}return l},s=(e,t,n)=>{const r=t[e],o=t[e+1],s=r.modulatorIndex,a=o?o.modulatorIndex:t.length;return g(s,a,n)},a=(e,t,n)=>{const r=t[e],o=t[e+1],s=r.generatorIndex,a=o?o.generatorIndex:t.length;return g(s,a,n)},g=(e,t,n)=>{const r={};for(let o=e;o<t;o++){const e=n[o];e&&(r[e.id]=e)}return r};export{o as getItemsInZone,r as getZones};
//# sourceMappingURL=zones.js.map
