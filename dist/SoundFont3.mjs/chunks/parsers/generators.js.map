{"version":3,"file":"generators.js","sources":["../../../../src/chunks/parsers/generators.ts"],"sourcesContent":["import { SF2Chunk } from '../../chunk'\nimport { ParseError } from '../../riff'\nimport { Generator, GeneratorType } from '../../types'\nimport { SF_GENERATOR_SIZE } from '../../constants'\n\n/**\n * An array of GeneratorTypes that cannot be specified for presets. If one of these generator types\n * is found, the generator should be ignored.\n */\nconst PRESET_TYPES_BLACKLIST: number[] = [\n  GeneratorType.StartAddrsOffset,\n  GeneratorType.EndAddrsOffset,\n  GeneratorType.StartLoopAddrsOffset,\n  GeneratorType.EndLoopAddrsOffset,\n  GeneratorType.StartAddrsCoarseOffset,\n  GeneratorType.EndAddrsCoarseOffset,\n  GeneratorType.StartLoopAddrsCoarseOffset,\n  GeneratorType.KeyNum,\n  GeneratorType.Velocity,\n  GeneratorType.EndLoopAddrsCoarseOffset,\n  GeneratorType.SampleModes,\n  GeneratorType.ExclusiveClass,\n  GeneratorType.OverridingRootKey\n]\n\n/**\n * An array of GeneratorTypes that cannot be specified for instruments. If one of these generator\n * types is found, the generator should be ignored.\n */\nconst INSTRUMENT_TYPES_BLACKLIST: number[] = [\n  GeneratorType.Unused1,\n  GeneratorType.Unused2,\n  GeneratorType.Unused3,\n  GeneratorType.Unused4,\n  GeneratorType.Reserved1,\n  GeneratorType.Reserved2,\n  GeneratorType.Reserved3\n]\n\n/**\n * These GeneratorTypes specify a range of key numbers or velocity.\n */\nconst RANGE_TYPES: number[] = [GeneratorType.KeyRange, GeneratorType.VelRange]\n\n/**\n * Get all generators for either an preset generator chunk or a instrument generator chunk.\n *\n * TODO: Check if generator chunk is valid, by following the rules defined in the spec. See for\n * example: https://github.com/FluidSynth/fluidsynth/blob/v2.0.3/src/sfloader/fluid_sffile.c\n *\n * @param {SF2Chunk} chunk - The input chunk\n * @param {string} type - The type, can be 'pgen' or 'igen'\n */\nexport const getGenerators = (chunk: SF2Chunk, type: 'pgen' | 'igen'): Generator[] => {\n  if (chunk.id !== type) {\n    throw new ParseError('Unexpected chunk ID', `'${type}'`, `'${chunk.id}'`)\n  }\n\n  if (chunk.length % SF_GENERATOR_SIZE) {\n    throw new ParseError(`Invalid size for the '${type}' sub-chunk`)\n  }\n\n  return chunk.iterate<Generator>((iterator) => {\n    const id = iterator.getInt16()\n\n    // Ignore invalid IDs\n    if (!GeneratorType[id]) {\n      return null\n    }\n\n    if (type === 'pgen' && PRESET_TYPES_BLACKLIST.includes(id)) {\n      return null\n    }\n\n    if (type === 'igen' && INSTRUMENT_TYPES_BLACKLIST.includes(id)) {\n      return null\n    }\n\n    if (RANGE_TYPES.includes(id)) {\n      return {\n        id,\n        range: {\n          lo: iterator.getByte(),\n          hi: iterator.getByte()\n        }\n      }\n    }\n\n    return {\n      id,\n      value: iterator.getInt16BE()\n    }\n  })\n}\n"],"names":["PRESET_TYPES_BLACKLIST","GeneratorType","StartAddrsOffset","EndAddrsOffset","StartLoopAddrsOffset","EndLoopAddrsOffset","StartAddrsCoarseOffset","EndAddrsCoarseOffset","StartLoopAddrsCoarseOffset","KeyNum","Velocity","EndLoopAddrsCoarseOffset","SampleModes","ExclusiveClass","OverridingRootKey","INSTRUMENT_TYPES_BLACKLIST","Unused1","Unused2","Unused3","Unused4","Reserved1","Reserved2","Reserved3","RANGE_TYPES","KeyRange","VelRange","getGenerators","chunk","type","id","ParseError","length","SF_GENERATOR_SIZE","iterate","iterator","getInt16","includes","range","lo","getByte","hi","value","getInt16BE"],"mappings":"uMASA,MAAMA,EAAmC,CACvCC,EAAcC,iBACdD,EAAcE,eACdF,EAAcG,qBACdH,EAAcI,mBACdJ,EAAcK,uBACdL,EAAcM,qBACdN,EAAcO,2BACdP,EAAcQ,OACdR,EAAcS,SACdT,EAAcU,yBACdV,EAAcW,YACdX,EAAcY,eACdZ,EAAca,mBAOVC,EAAuC,CAC3Cd,EAAce,QACdf,EAAcgB,QACdhB,EAAciB,QACdjB,EAAckB,QACdlB,EAAcmB,UACdnB,EAAcoB,UACdpB,EAAcqB,WAMVC,EAAwB,CAACtB,EAAcuB,SAAUvB,EAAcwB,UAWxDC,EAAgB,CAACC,EAAiBC,KACzC,GAAAD,EAAME,KAAOD,EACT,MAAA,IAAIE,EAAW,sBAAuB,IAAIF,KAAS,IAAID,EAAME,OAGjE,GAAAF,EAAMI,OAASC,EACjB,MAAM,IAAIF,EAAW,yBAAyBF,gBAGzC,OAAAD,EAAMM,SAAoBC,IACzB,MAAAL,EAAKK,EAASC,WAGhB,OAAClC,EAAc4B,GAIN,SAATD,GAAmB5B,EAAuBoC,SAASP,IAI1C,SAATD,GAAmBb,EAA2BqB,SAASP,GAHlD,KAOLN,EAAYa,SAASP,GAChB,CACLA,KACAQ,MAAO,CACLC,GAAIJ,EAASK,UACbC,GAAIN,EAASK,YAKZ,CACLV,KACAY,MAAOP,EAASQ,cAvBT,IAwBT,GACD"}