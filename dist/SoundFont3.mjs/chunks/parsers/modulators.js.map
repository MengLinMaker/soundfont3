{"version":3,"file":"modulators.js","sources":["../../../../src/chunks/parsers/modulators.ts"],"sourcesContent":["import { SF2Chunk } from '../../chunk'\nimport { Modulator, ControllerValue } from '../../types'\nimport { ParseError } from '../../riff'\nimport { SF_MODULATOR_SIZE } from '../../constants'\n\n/**\n * Get the modulator enumerator value from a 16-bit integer.\n *\n * @param {number} value - The 16-bit integer\n */\nconst getModulatorValue = (value: number): ControllerValue => {\n  return {\n    type: (value >> 10) & 0x3f,\n    polarity: (value >> 9) & 1,\n    direction: (value >> 8) & 1,\n    palette: (value >> 7) & 1,\n    index: value & 0x7f\n  }\n}\n\n/**\n * Get the modulators from either a `pmod` (presets) or `imod` (instruments) chunk.\n *\n * @param {SF2Chunk} chunk - The input chunk\n * @param {string} type - The type of chunk, either 'pmod' or 'imod'\n */\nexport const getModulators = (chunk: SF2Chunk, type: 'pmod' | 'imod'): Modulator[] => {\n  if (chunk.id !== type) {\n    throw new ParseError('Unexpected chunk ID', `'${type}'`, `'${chunk.id}'`)\n  }\n\n  if (chunk.length % SF_MODULATOR_SIZE) {\n    throw new ParseError(`Invalid size for the '${type}' sub-chunk`)\n  }\n\n  return chunk.iterate<Modulator>((iterator) => {\n    return {\n      source: getModulatorValue(iterator.getInt16BE()),\n      id: iterator.getInt16BE(),\n      value: iterator.getInt16BE(),\n      valueSource: getModulatorValue(iterator.getInt16BE()),\n      transform: iterator.getInt16BE()\n    }\n  })\n}\n"],"names":["getModulatorValue","value","type","polarity","direction","palette","index","getModulators","chunk","id","ParseError","length","SF_MODULATOR_SIZE","iterate","iterator","source","getInt16BE","valueSource","transform"],"mappings":"6GAUA,MAAMA,EAAqBC,IAClB,CACLC,KAAOD,GAAS,GAAM,GACtBE,SAAWF,GAAS,EAAK,EACzBG,UAAYH,GAAS,EAAK,EAC1BI,QAAUJ,GAAS,EAAK,EACxBK,MAAe,IAARL,IAUEM,EAAgB,CAACC,EAAiBN,KACzC,GAAAM,EAAMC,KAAOP,EACT,MAAA,IAAIQ,EAAW,sBAAuB,IAAIR,KAAS,IAAIM,EAAMC,OAGjE,GAAAD,EAAMG,OAASC,EACjB,MAAM,IAAIF,EAAW,yBAAyBR,gBAGzC,OAAAM,EAAMK,SAAoBC,IACxB,CACLC,OAAQf,EAAkBc,EAASE,cACnCP,GAAIK,EAASE,aACbf,MAAOa,EAASE,aAChBC,YAAajB,EAAkBc,EAASE,cACxCE,UAAWJ,EAASE,gBAEvB"}