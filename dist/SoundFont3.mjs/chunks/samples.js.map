{"version":3,"file":"samples.js","sources":["../../../src/chunks/samples.ts"],"sourcesContent":["import { SF2Chunk } from '../chunk'\nimport { ParseError } from '../riff'\nimport { SF_SAMPLE_HEADER_SIZE } from '../constants'\nimport { SampleHeader } from '../types'\n\n/**\n * Get all sample headers from a `shdr` sub-chunk.\n *\n * @param {SF2Chunk} chunk - The input chunk\n */\nexport const getSampleHeaders = (chunk: SF2Chunk): SampleHeader[] => {\n  if (chunk.id !== 'shdr') {\n    throw new ParseError('Unexpected chunk ID', `'shdr'`, `'${chunk.id}'`)\n  }\n\n  if (chunk.length % SF_SAMPLE_HEADER_SIZE) {\n    throw new ParseError(`Invalid size for the 'shdr' sub-chunk`)\n  }\n\n  return chunk.iterate<SampleHeader>((iterator) => {\n    return {\n      name: iterator.getString(),\n      start: iterator.getUInt32(),\n      end: iterator.getUInt32(),\n      startLoop: iterator.getUInt32(),\n      endLoop: iterator.getUInt32(),\n      sampleRate: iterator.getUInt32(),\n      originalPitch: iterator.getByte(),\n      pitchCorrection: iterator.getChar(),\n      link: iterator.getInt16(),\n      type: iterator.getInt16()\n    }\n  })\n}\n"],"names":["getSampleHeaders","chunk","id","ParseError","length","SF_SAMPLE_HEADER_SIZE","iterate","iterator","name","getString","start","getUInt32","end","startLoop","endLoop","sampleRate","originalPitch","getByte","pitchCorrection","getChar","link","getInt16","type"],"mappings":"2GAUa,MAAAA,EAAoBC,IAC3B,GAAa,SAAbA,EAAMC,GACR,MAAM,IAAIC,EAAW,sBAAuB,SAAU,IAAIF,EAAMC,OAG9D,GAAAD,EAAMG,OAASC,EACX,MAAA,IAAIF,EAAW,yCAGhB,OAAAF,EAAMK,SAAuBC,IAC3B,CACLC,KAAMD,EAASE,YACfC,MAAOH,EAASI,YAChBC,IAAKL,EAASI,YACdE,UAAWN,EAASI,YACpBG,QAASP,EAASI,YAClBI,WAAYR,EAASI,YACrBK,cAAeT,EAASU,UACxBC,gBAAiBX,EAASY,UAC1BC,KAAMb,EAASc,WACfC,KAAMf,EAASc,cAElB"}