{"version":3,"file":"presets.js","sources":["../../../src/chunks/presets.ts"],"sourcesContent":["import { SF2Chunk } from '../chunk'\nimport { ParseError } from '../riff'\nimport { SF_PRESET_HEADER_SIZE } from '../constants'\nimport { PresetHeader } from '../types'\n\n/**\n * Get all preset headers from a `phdr` sub-chunk.\n *\n * @param {SF2Chunk} chunk - The input chunk\n */\nexport const getPresetHeaders = (chunk: SF2Chunk): PresetHeader[] => {\n  if (chunk.id !== 'phdr') {\n    throw new ParseError('Invalid chunk ID', `'phdr'`, `'${chunk.id}'`)\n  }\n\n  if (chunk.length % SF_PRESET_HEADER_SIZE) {\n    throw new ParseError(`Invalid size for the 'phdr' sub-chunk`)\n  }\n\n  return chunk.iterate<PresetHeader>((iterator) => {\n    return {\n      name: iterator.getString(),\n      preset: iterator.getInt16(),\n      bank: iterator.getInt16(),\n      bagIndex: iterator.getInt16(),\n      library: iterator.getUInt32(),\n      genre: iterator.getUInt32(),\n      morphology: iterator.getUInt32()\n    }\n  })\n}\n"],"names":["getPresetHeaders","chunk","id","ParseError","length","SF_PRESET_HEADER_SIZE","iterate","iterator","name","getString","preset","getInt16","bank","bagIndex","library","getUInt32","genre","morphology"],"mappings":"2GAUa,MAAAA,EAAoBC,IAC3B,GAAa,SAAbA,EAAMC,GACR,MAAM,IAAIC,EAAW,mBAAoB,SAAU,IAAIF,EAAMC,OAG3D,GAAAD,EAAMG,OAASC,EACX,MAAA,IAAIF,EAAW,yCAGhB,OAAAF,EAAMK,SAAuBC,IAC3B,CACLC,KAAMD,EAASE,YACfC,OAAQH,EAASI,WACjBC,KAAML,EAASI,WACfE,SAAUN,EAASI,WACnBG,QAASP,EAASQ,YAClBC,MAAOT,EAASQ,YAChBE,WAAYV,EAASQ,eAExB"}