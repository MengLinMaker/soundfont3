import{SoundFont3 as e}from"../soundFont3.js";import{writeSoundFont as t}from"./writeSoundFont.js";import{concatBuffer as r}from"./utils.js";const n=async(n,a=`soundfont-${crypto.randomUUID()}`)=>{const o=structuredClone(n);if("undefined"!=typeof document)throw Error("WebCodecs not supported yet.");if(Number(o.metaData.version)<3)return n;const{existsSync:s,mkdirSync:i,readFileSync:d,rmdirSync:c,unlinkSync:y,writeFileSync:m}=await import("fs"),{execSync:p}=await import("child_process");s(a)||i(a);const h=[];let f=new Int8Array,u=0,g=0;return o.samples.map((e=>{const t=`${a}/${e.header.name}`,n=e.data.buffer;m(`${t}.ogg`,new Int8Array(e.data)),p(`ffmpeg -y -i "${t}.ogg" -ar ${e.header.sampleRate} -ac 1 "${t}.wav"`,{stdio:"ignore"});const o=d(`${t}.wav`),s=new Int8Array(o.slice(78,o.byteLength));y(`${t}.wav`),y(`${t}.ogg`);const i=new ArrayBuffer(2-s.byteLength%2);e.header.start=u,e.header.end=u+s.byteLength/2,e.header.startLoop+=g,e.header.endLoop+=g,f=r(r(f,s),i),u+=s.byteLength/2+i.byteLength,g+=n.byteLength,h.push(e.header)})),console.info(`Sample size: ${(f.byteLength/10**6).toFixed(3)} mb`),c(a),o.metaData.version="2.04",o.sampleData=new Int16Array(f),o.presetData.sampleHeaders=h,new e(new Uint8Array(t(o)))};export{n as toSoundFont2};
//# sourceMappingURL=toSoundFont2.js.map
