{"version":3,"file":"writeMetaDataChunk.js","sources":["../../../../src/write/soundFont/writeMetaDataChunk.ts"],"sourcesContent":["import { MetaData } from '../../types'\nimport { SF_INFO_CHUNKS_ID } from '../../constants'\nimport { writeRiffSubChunk, writeRiffTopChunk } from './writeRiffChunk'\nimport { concatBuffer } from '../utils'\n\n/**\n * Writes a metadata chunk buffer.\n * @param {MetaData} metaData - parsed metadata info.\n * @return {Buffer} Chunk buffer.\n */\nexport const writeMetaDataChunk = (metaData: MetaData) => {\n  let metaDataBuffer = new Int8Array()\n  const textEncoder = new TextEncoder()\n  {\n    // Scope variables to prevent leakage\n    const chunkId: SF_INFO_CHUNKS_ID = 'ifil'\n    const soundFontVersion = metaData.version.split('.')\n    const view = new DataView(new ArrayBuffer(4))\n    view.setUint16(0, Number(soundFontVersion[0]), true)\n    view.setUint16(2, Number(soundFontVersion[1]), true)\n    const chunkBuffer = writeRiffSubChunk(chunkId, view.buffer)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  {\n    const chunkId: SF_INFO_CHUNKS_ID = 'isng'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.soundEngine), 6)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  {\n    const chunkId: SF_INFO_CHUNKS_ID = 'INAM'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.name), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n\n  // 8 non-essential metadata\n  if (metaData.rom) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'irom'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.rom), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.romVersion) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'iver'\n    const romVersion = metaData.romVersion.split('.')\n    const iverView = new DataView(new ArrayBuffer(4))\n    iverView.setUint16(0, Number(romVersion[0]))\n    iverView.setUint16(2, Number(romVersion[1]))\n    const chunkBuffer = writeRiffSubChunk(chunkId, iverView.buffer)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.creationDate) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'ICRD'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.creationDate), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.author) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'IENG'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.author), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.product) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'IPRD'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.product), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.copyright) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'ICOP'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.copyright), 6)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.comments) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'ICMT'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.comments), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  if (metaData.createdBy) {\n    const chunkId: SF_INFO_CHUNKS_ID = 'ISFT'\n    const chunkBuffer = writeRiffSubChunk(chunkId, textEncoder.encode(metaData.createdBy), 2)\n    metaDataBuffer = concatBuffer(metaDataBuffer, chunkBuffer)\n  }\n  return writeRiffTopChunk('LIST', 'INFO', metaDataBuffer)\n}\n"],"names":["writeMetaDataChunk","metaData","metaDataBuffer","Int8Array","textEncoder","TextEncoder","chunkId","soundFontVersion","version","split","view","DataView","ArrayBuffer","setUint16","Number","chunkBuffer","writeRiffSubChunk","buffer","concatBuffer","encode","soundEngine","name","rom","romVersion","iverView","creationDate","author","product","copyright","comments","createdBy","writeRiffTopChunk"],"mappings":"0HAUa,MAAAA,EAAsBC,IAC7B,IAAAC,EAAiB,IAAIC,UACnB,MAAAC,EAAc,IAAIC,YACxB,CAEE,MAAMC,EAA6B,OAC7BC,EAAmBN,EAASO,QAAQC,MAAM,KAC1CC,EAAO,IAAIC,SAAS,IAAIC,YAAY,IAC1CF,EAAKG,UAAU,EAAGC,OAAOP,EAAiB,KAAK,GAC/CG,EAAKG,UAAU,EAAGC,OAAOP,EAAiB,KAAK,GAC/C,MAAMQ,EAAcC,EAAkBV,EAASI,EAAKO,QACnCf,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,CACE,MACMA,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAASmB,aAAc,GACxElB,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,CACE,MACMA,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAASoB,MAAO,GACjEnB,EAAAgB,EAAahB,EAAgBa,EAChD,CAGA,GAAId,EAASqB,IAAK,CAChB,MACMP,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAASqB,KAAM,GAChEpB,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAASsB,WAAY,CACvB,MAAMjB,EAA6B,OAC7BiB,EAAatB,EAASsB,WAAWd,MAAM,KACvCe,EAAW,IAAIb,SAAS,IAAIC,YAAY,IAC9CY,EAASX,UAAU,EAAGC,OAAOS,EAAW,KACxCC,EAASX,UAAU,EAAGC,OAAOS,EAAW,KACxC,MAAMR,EAAcC,EAAkBV,EAASkB,EAASP,QACvCf,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAASwB,aAAc,CACzB,MACMV,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAASwB,cAAe,GACzEvB,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAASyB,OAAQ,CACnB,MACMX,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAASyB,QAAS,GACnExB,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAAS0B,QAAS,CACpB,MACMZ,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAAS0B,SAAU,GACpEzB,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAAS2B,UAAW,CACtB,MACMb,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAAS2B,WAAY,GACtE1B,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAAS4B,SAAU,CACrB,MACMd,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAAS4B,UAAW,GACrE3B,EAAAgB,EAAahB,EAAgBa,EAChD,CACA,GAAId,EAAS6B,UAAW,CACtB,MACMf,EAAcC,EADe,OACYZ,EAAYe,OAAOlB,EAAS6B,WAAY,GACtE5B,EAAAgB,EAAahB,EAAgBa,EAChD,CACO,OAAAgB,EAAkB,OAAQ,OAAQ7B,EAAc"}