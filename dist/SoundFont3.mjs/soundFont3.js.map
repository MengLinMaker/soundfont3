{"version":3,"file":"soundFont3.js","sources":["../../src/soundFont3.ts"],"sourcesContent":["import {\n  Bank,\n  GeneratorType,\n  Instrument,\n  Key,\n  MetaData,\n  Preset,\n  PresetData,\n  Sample,\n  ZoneItems\n} from './types'\nimport { SF2Chunk } from './chunk'\nimport { parseBuffer, ParseError } from './riff'\nimport { getItemsInZone } from './chunks'\n\n/**\n * Returns a memoized function for the original function. Function arguments are serialized as a\n * JSON string and stored in an in-memory object.\n *\n * @template T\n * @template U\n * @param {(...originalArgs: T[]) => U} originalFunction\n */\nexport const memoize = <T, U>(\n  originalFunction: (...originalArgs: T[]) => U\n): ((...args: T[]) => U) => {\n  const memo: { [key: string]: U } = {}\n\n  return (...args: T[]) => {\n    const serializedArgs = JSON.stringify(args)\n    if (serializedArgs in memo) {\n      return memo[serializedArgs]\n    }\n\n    const output = originalFunction(...args)\n    memo[serializedArgs] = output\n    return output\n  }\n}\n\nexport class SoundFont3 {\n  /**\n   * Create a new `SoundFont3` instance from a raw input buffer.\n   *\n   * @param {Uint8Array} buffer\n   * @deprecated Replaced with `new SoundFont3(buffer: Uint8Array);`\n   */\n  public static from(buffer: Uint8Array): SoundFont3 {\n    return new SoundFont3(buffer)\n  }\n\n  /**\n   * The raw RIFF chunk data.\n   */\n  public readonly chunk: SF2Chunk\n\n  /**\n   * The meta data.\n   */\n  public readonly metaData: MetaData\n\n  /**\n   * The raw sample data.\n   */\n  public readonly sampleData: Uint8Array\n\n  /**\n   * The parsed samples.\n   */\n  public readonly samples: Sample[]\n\n  /**\n   * The unparsed preset data.\n   */\n  public readonly presetData: PresetData\n\n  /**\n   * The parsed instuments.\n   */\n  public readonly instruments: Instrument[]\n\n  /**\n   * The parsed presets.\n   */\n  public readonly presets: Preset[]\n\n  /**\n   * The parsed banks.\n   */\n  public readonly banks: Bank[]\n\n  /**\n   * Load a SoundFont3 file from a `Uint8Array` or a `SF2Chunk`. The recommended way is to use a\n   * Uint8Array, loading a SoundFont3 from a `SF2Chunk` only exists for backwards compatibility and\n   * will likely be removed in a future version.\n   *\n   * @param {Uint8Array|SF2Chunk} chunk\n   */\n  public constructor(chunk: Uint8Array | SF2Chunk) {\n    if (!(chunk instanceof SF2Chunk)) {\n      const parsedBuffer = parseBuffer(chunk)\n      chunk = new SF2Chunk(parsedBuffer)\n    }\n\n    if (chunk.subChunks.length !== 3) {\n      throw new ParseError('Invalid sfbk structure', '3 chunks', `${chunk.subChunks.length} chunks`)\n    }\n\n    this.chunk = chunk\n    this.metaData = chunk.subChunks[0].getMetaData()\n    this.sampleData = chunk.subChunks[1].getSampleData()\n    this.presetData = chunk.subChunks[2].getPresetData()\n\n    this.samples = this.getSamples()\n    this.instruments = this.getInstruments()\n    this.presets = this.getPresets()\n    this.banks = this.getBanks()\n  }\n\n  /**\n   * Get the key data by MIDI bank, preset and key number. May return null if no instrument was\n   * found for the given inputs. Note that this does not process any of the generators that are\n   * specific to the key number.\n   *\n   * The result is memoized based on all arguments, to prevent having to check all presets,\n   * instruments etc. every time.\n   *\n   * @param {number} memoizedKeyNumber - The MIDI key number\n   * @param {number} [memoizedBankNumber] - The bank index number, defaults to 0\n   * @param {number} [memoizedPresetNumber] - The preset number, defaults to 0\n   */\n  public getKeyData(\n    memoizedKeyNumber: number,\n    memoizedBankNumber: number = 0,\n    memoizedPresetNumber: number = 0\n  ): Key | null {\n    // Get a memoized version of the function\n    return memoize((keyNumber: number, bankNumber: number, presetNumber: number): Key | null => {\n      const bank = this.banks[bankNumber]\n      if (bank) {\n        const preset = bank.presets[presetNumber]\n        if (preset) {\n          const presetZone = preset.zones.find((zone) => this.isKeyInRange(zone, keyNumber))\n          if (presetZone) {\n            const instrument = presetZone.instrument\n            const instrumentZone = instrument.zones.find((zone) =>\n              this.isKeyInRange(zone, keyNumber)\n            )\n            if (instrumentZone) {\n              const sample = instrumentZone.sample\n              const generators = { ...presetZone.generators, ...instrumentZone.generators }\n              const modulators = { ...presetZone.modulators, ...instrumentZone.modulators }\n\n              return {\n                keyNumber,\n                preset,\n                instrument,\n                sample,\n                generators,\n                modulators\n              }\n            }\n          }\n        }\n      }\n\n      return null\n    })(memoizedKeyNumber, memoizedBankNumber, memoizedPresetNumber)\n  }\n\n  /**\n   * Checks if a MIDI key number is in the range of a zone.\n   *\n   * @param {ZoneItems} zone - The zone to check\n   * @param {number} keyNumber - The MIDI key number, must be between 0 and 127\n   */\n  private isKeyInRange(zone: ZoneItems, keyNumber: number): boolean {\n    return (\n      zone.keyRange === undefined ||\n      (zone.keyRange.lo <= keyNumber && zone.keyRange.hi >= keyNumber)\n    )\n  }\n\n  /**\n   * Parse the presets to banks.\n   */\n  private getBanks(): Bank[] {\n    return this.presets.reduce<Bank[]>((target, preset) => {\n      const bankNumber = preset.header.bank\n\n      if (!target[bankNumber]) {\n        target[bankNumber] = {\n          presets: []\n        }\n      }\n\n      target[bankNumber].presets[preset.header.preset] = preset\n      return target\n    }, [])\n  }\n\n  /**\n   * Parse the raw preset data to presets.\n   */\n  private getPresets(): Preset[] {\n    const { presetHeaders, presetZones, presetGenerators, presetModulators } = this.presetData\n\n    const presets = getItemsInZone(\n      presetHeaders,\n      presetZones,\n      presetModulators,\n      presetGenerators,\n      this.instruments,\n      GeneratorType.Instrument\n    )\n\n    return presets\n      .filter((preset) => preset.header.name !== 'EOP')\n      .map((preset) => {\n        return {\n          header: preset.header,\n          globalZone: preset.globalZone,\n          zones: preset.zones.map((zone) => {\n            return {\n              keyRange: zone.keyRange,\n              generators: zone.generators,\n              modulators: zone.modulators,\n              instrument: zone.reference\n            }\n          })\n        }\n      })\n  }\n\n  /**\n   * Parse the raw instrument data (found in the preset data) to instruments.\n   */\n  private getInstruments(): Instrument[] {\n    const { instrumentHeaders, instrumentZones, instrumentModulators, instrumentGenerators } =\n      this.presetData\n\n    const instruments = getItemsInZone(\n      instrumentHeaders,\n      instrumentZones,\n      instrumentModulators,\n      instrumentGenerators,\n      this.samples,\n      GeneratorType.SampleId\n    )\n\n    return instruments\n      .filter((instrument) => instrument.header.name !== 'EOI')\n      .map((instrument) => {\n        return {\n          header: instrument.header,\n          globalZone: instrument.globalZone,\n          zones: instrument.zones.map((zone) => {\n            return {\n              keyRange: zone.keyRange,\n              generators: zone.generators,\n              modulators: zone.modulators,\n              sample: zone.reference\n            }\n          })\n        }\n      })\n  }\n\n  /**\n   * Parse the raw sample data and sample headers to samples.\n   */\n  private getSamples(): Sample[] {\n    return this.presetData.sampleHeaders\n      .filter((sample) => sample.name !== 'EOS')\n      .map((header) => {\n        // Sample rate must be above 0\n        if (header.name !== 'EOS' && header.sampleRate <= 0) {\n          throw new Error(\n            `Illegal sample rate of ${header.sampleRate} hz in sample '${header.name}'`\n          )\n        }\n\n        // Original pitch cannot be between 128 and 254\n        if (header.originalPitch >= 128 && header.originalPitch <= 254) {\n          header.originalPitch = 60\n        }\n\n        header.startLoop -= header.start\n        header.endLoop -= header.start\n\n        const soundFontVersion = Number(this.metaData.version)\n        if (soundFontVersion >= 3 && soundFontVersion < 4) {\n          const data = this.sampleData.subarray(header.start, header.end)\n          return {\n            header,\n            data\n          }\n        }\n\n        return {\n          header,\n          data: new Int16Array(\n            new Uint8Array(this.sampleData.subarray(header.start * 2, header.end * 2)).buffer\n          )\n        }\n      })\n  }\n}\n"],"names":["memoize","originalFunction","memo","args","serializedArgs","JSON","stringify","output","SoundFont3","constructor","chunk","__publicField","this","SF2Chunk","parsedBuffer","parseBuffer","subChunks","length","ParseError","metaData","getMetaData","sampleData","getSampleData","presetData","getPresetData","samples","getSamples","instruments","getInstruments","presets","getPresets","banks","getBanks","from","buffer","getKeyData","memoizedKeyNumber","memoizedBankNumber","memoizedPresetNumber","keyNumber","bankNumber","presetNumber","bank","preset","presetZone","zones","find","zone","isKeyInRange","instrument","instrumentZone","sample","generators","modulators","keyRange","lo","hi","reduce","target","header","presetHeaders","presetZones","presetGenerators","presetModulators","getItemsInZone","GeneratorType","Instrument","filter","name","map","globalZone","reference","instrumentHeaders","instrumentZones","instrumentModulators","instrumentGenerators","SampleId","sampleHeaders","sampleRate","Error","originalPitch","startLoop","start","endLoop","soundFontVersion","Number","version","data","subarray","end","Int16Array","Uint8Array"],"mappings":"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"}