{"version":3,"file":"modulator.js","sources":["../../../src/types/modulator.ts"],"sourcesContent":["import { GeneratorType } from './generator'\n\nexport enum ControllerType {\n  /**\n   * The controller moves linearly from the minimum to the maximum value, with the direction and\n   * polarity specified by the modulator.\n   */\n  Linear = 0,\n\n  /**\n   * The controller moves in a concave fashion from the minimum to the maximum value, with the\n   * direction and polarity specified by the modulator.\n   *\n   * `output = Math.log(Math.sqrt(value ** 2) / [max value] ** 2)`\n   */\n  Concave = 1,\n\n  /**\n   * The controller moves in a convex fashion from the minimum to the maximum value, with the\n   * direction and polarity specified by the modulator. This is the same as the concave curve, but\n   * with the start and end points reversed.\n   */\n  Convex = 2,\n\n  /**\n   * The controller output is at a minimum value while the controller input moves from the minimum\n   * to half of the maximum, after which the controller output is at a maximum. The direction and\n   * polarity are specified by the modulator.\n   */\n  Switch = 3\n}\n\nexport enum ControllerPolarity {\n  /**\n   * The controller should be mapped with a minimum value of 0 and a maximum value of 1. It behaves\n   * similar to the modulation wheel controller of the MIDI specification.\n   */\n  Unipolar = 0,\n\n  /**\n   * The controller should be mapped with a minimum value of -1 and a maximum value of 1. It\n   * behaves similar to the pitch wheel controller of the MIDI specification.\n   */\n  Bipolar = 1\n}\n\nexport enum ControllerDirection {\n  /**\n   * The direction of the controller should be from the minimum to the maximum value.\n   */\n  Increasing = 0,\n\n  /**\n   * The direction of the controller should be from the maximum to the minimum value.\n   */\n  Decreasing = 1\n}\n\nexport enum ControllerPalette {\n  /**\n   * Use the general controller palette as described by the `Controller` enum.\n   */\n  GeneralController = 0,\n\n  /**\n   * Use the MIDI controller palette.\n   */\n  MidiController = 1\n}\n\nexport enum Controller {\n  /**\n   * No controller is to be used.\n   */\n  NoController = 0,\n\n  /**\n   * The controller source to be used is the velocity value which is sent from the MIDI note-on\n   * command.\n   */\n  NoteOnVelocity = 2,\n\n  /**\n   * The controller source to be used is the key number value which was sent from the MIDI note-on\n   * command.\n   */\n  NoteOnKeyNumber = 3,\n\n  /**\n   * The controller source to be used is the poly pressure amount that is sent from the MIDI\n   * poly-pressure command.\n   */\n  PolyPressure = 10,\n\n  /**\n   * The controller source to be used is the channel pressure amount that is sent from the MIDI\n   * channel-pressure command.\n   */\n  ChannelPressure = 13,\n\n  /**\n   * The controller source to be used is the pitch wheel amount which is sent from the MIDI pitch\n   * wheel command.\n   */\n  PitchWheel = 14,\n\n  /**\n   * The controller source to be used is the pitch wheel sensitivity amount which is sent from the\n   * MIDI RPN 0 pitch wheel sensitivity command.\n   */\n  PitchWheelSensitivity = 16,\n\n  /**\n   * The controller source is the output of another modulator. This is only supported as `value`,\n   * not as `valueSource`.\n   */\n  Link = 127\n}\n\nexport interface ControllerValue {\n  /**\n   * The type of modulator.\n   */\n  type: ControllerType\n\n  /**\n   * The polarity of the modulator.\n   */\n  polarity: ControllerPolarity\n\n  /**\n   * The direction of the modulator.\n   */\n  direction: ControllerDirection\n\n  /**\n   * The controller palette used for the modulator.\n   */\n  palette: ControllerPalette\n\n  /**\n   * The index of the general or MIDI controller. If the palette is set to `GeneralController`,\n   * this refers to a type in the `Controller` type. Otherwise, its a MIDI continuous controller.\n   */\n  index: Controller | number\n}\n\nexport enum TransformType {\n  /**\n   * The output value of the multiplier is fed directly to the summing node of the given\n   * destination.\n   */\n  Linear = 0,\n\n  /**\n   * The output value of the multiplier is to be the absolute value of the input value, as defined\n   * by the relationship:\n   *\n   * `output = Math.sqrt(input ** 2)` or simply `output = Math.abs(input)`\n   */\n  Absolute = 2\n}\n\nexport interface Modulator {\n  /**\n   * Destination generator.\n   */\n  id: GeneratorType\n\n  /**\n   * Source modulator.\n   */\n  source: ControllerValue\n\n  /**\n   * Degree of modulation.\n   */\n  value: number\n\n  /**\n   * Source controls value of first.\n   *\n   * TODO: Description is unclear. Should be improved.\n   */\n  valueSource: ControllerValue\n\n  /**\n   * Transform applied to source.\n   */\n  transform: TransformType\n}\n\n/**\n * The default modulators at instrument level. Implementing these is up to the consumer of this\n * library. To override these modulators, other modulators have to be defined explicitly.\n */\nexport const DEFAULT_INSTRUMENT_MODULATORS: Modulator[] = [\n  // MIDI note-on velocity to initial attenuation\n  {\n    id: GeneratorType.InitialAttenuation,\n    source: {\n      type: ControllerType.Concave,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Decreasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoteOnVelocity\n    },\n    value: 960,\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI note-on velocity to filter cutoff\n  {\n    id: GeneratorType.InitialFilterFc,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Decreasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoteOnVelocity\n    },\n    value: -2400, // cents\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI channel pressure to vibrato LFO pitch depth\n  {\n    id: GeneratorType.VibLFOToPitch,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.ChannelPressure\n    },\n    value: 50, // cents / max excursion\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 1 to vibrato LFO pitch depth\n  {\n    id: GeneratorType.VibLFOToPitch,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.MidiController,\n      index: 1\n    },\n    value: 50,\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 7 to initial attenuation\n  {\n    id: GeneratorType.InitialAttenuation,\n    source: {\n      type: ControllerType.Concave,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Decreasing,\n      palette: ControllerPalette.MidiController,\n      index: 7\n    },\n    value: 960,\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 10 to pan position\n  {\n    id: GeneratorType.InitialAttenuation,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Bipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.MidiController,\n      index: 10\n    },\n    value: 1000, // tenths of a percent\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 11 to initial attenuation\n  {\n    id: GeneratorType.InitialAttenuation,\n    source: {\n      type: ControllerType.Concave,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Decreasing,\n      palette: ControllerPalette.MidiController,\n      index: 11\n    },\n    value: 960,\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 91 to reverb effects send\n  {\n    id: GeneratorType.ReverbEffectsSend,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.MidiController,\n      index: 91\n    },\n    value: 200, // tenths of a percent\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI continuous controller 93 to chorus effects send\n  {\n    id: GeneratorType.ChorusEffectsSend,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.MidiController,\n      index: 93\n    },\n    value: 200, // tenths of a percent\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.NoController\n    },\n    transform: TransformType.Linear\n  },\n\n  // MIDI pitch wheel to initial pitch controlled by MIDI pitch wheel sensitivity\n  {\n    id: GeneratorType.CoarseTune,\n    source: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Bipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.PitchWheel\n    },\n    value: 12700, // cents\n    valueSource: {\n      type: ControllerType.Linear,\n      polarity: ControllerPolarity.Unipolar,\n      direction: ControllerDirection.Increasing,\n      palette: ControllerPalette.GeneralController,\n      index: Controller.PitchWheelSensitivity\n    },\n    transform: TransformType.Linear\n  }\n]\n"],"names":["GeneratorType","InitialAttenuation","InitialFilterFc","VibLFOToPitch","ReverbEffectsSend","ChorusEffectsSend","CoarseTune"],"mappings":"+CAuMQA,EAAcC,mBAqBdD,EAAcE,gBAqBdF,EAAcG,cAqBdH,EAAcG,cAqBdH,EAAcC,mBAqBdD,EAAcC,mBAqBdD,EAAcC,mBAqBdD,EAAcI,kBAqBdJ,EAAcK,kBAqBdL,EAAcM"}