{"version":3,"file":"sample.js","sources":["../../../src/types/sample.ts"],"sourcesContent":["/**\n * SoundFont3 samples are in the WAV format, meaning that they consist of a signed 16-bit array,\n * instead of a unsigned 8-bit array, which is read by default. The sample data in the `smpl`\n * sub-chunk is parsed as Int16Array before creating a sample.\n */\nexport type SampleData = Int16Array | Uint8Array\n\n/**\n * The sample type, found in the `type` field in the header.\n */\nexport enum SampleType {\n  EOS = 0,\n  Mono = 1,\n  Right = 2,\n  Left = 4,\n  Linked = 8,\n  RomMono = 32769,\n  RomRight = 32770,\n  RomLeft = 32772,\n  RomLinked = 32776\n}\n\nexport interface SampleHeader {\n  /**\n   * The name of the sample. This may be EOS, indicating end of samples, with all of the other\n   * values set to zero.\n   */\n  name: string\n\n  /**\n   * The start of the sample in data points, from the beginning of the sample data field to the\n   * first data point of the sample.\n   */\n  start: number\n\n  /**\n   * The end of the sample in data points, from the beginning of the sample data field to the first\n   * set of 46 zero valued data points following this sample.\n   */\n  end: number\n\n  /**\n   * The index in sample data points, from the beginning of the sample data field to the first data\n   * point in the loop of this sample.\n   */\n  startLoop: number\n\n  /**\n   * The index in sample data points, from the beginning of the sample data field to the first data\n   * point following the loop of this sample.\n   */\n  endLoop: number\n\n  /**\n   * The sample rate in hertz, at which the sample was acquired or to which it was most recently\n   * converted. The value should be between 400 and 50000 hertz, but this is not a strict\n   * requirement. A value of zero is illegal.\n   */\n  sampleRate: number\n\n  /**\n   * The MIDI key number of the recorded pitch of the sample. For unpitched sounds, this should be\n   * a value of 255. Values between 128 and 254 are illegal and a value of 60 should be used\n   * instead.\n   */\n  originalPitch: number\n\n  /**\n   * The pitch correction in cents that should be applied to the sample on playback, to compensate\n   * for any pitch errors during the sample recording.\n   */\n  pitchCorrection: number\n\n  /**\n   * The sample header index of the associated left or right sample, if the sample type is a left\n   * or right type. Both samples should be played at the same time, with the pitch controlled by\n   * the right sample's generators.\n   */\n  link: number\n\n  /**\n   * Indicates the type of sample.\n   */\n  type: SampleType\n}\n\nexport interface Sample {\n  /**\n   * The sample header containing the meta data.\n   */\n  header: SampleHeader\n\n  /**\n   * The sample data parsed as Int16Array.\n   */\n  data: SampleData\n}\n"],"names":["SampleType"],"mappings":"AAUY,IAAAA,GAAAA,IACVA,EAAAA,MAAM,GAAN,MACAA,EAAAA,OAAO,GAAP,OACAA,EAAAA,QAAQ,GAAR,QACAA,EAAAA,OAAO,GAAP,OACAA,EAAAA,SAAS,GAAT,SACAA,EAAAA,UAAU,OAAV,UACAA,EAAAA,WAAW,OAAX,WACAA,EAAAA,UAAU,OAAV,UACAA,EAAAA,YAAY,OAAZ,YATUA,IAAAA,GAAA,CAAA"}