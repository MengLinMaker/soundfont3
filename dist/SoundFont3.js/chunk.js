"use strict";var e=require("./riff/parseError.js"),s=require("./riff/riffChunk.js"),r=require("./constants.js"),t=require("./chunks/instruments.js"),n=require("./chunks/presets.js"),i=require("./chunks/samples.js"),u=require("./chunks/parsers/generators.js"),a=require("./chunks/parsers/modulators.js"),h=require("./chunks/parsers/zones.js"),o=Object.defineProperty,d=(e,s,r)=>((e,s,r)=>s in e?o(e,s,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[s]=r)(e,s+"",r);class k extends s.RIFFChunk{constructor(e){super(e.id,e.length,e.buffer,e.subChunks),d(this,"subChunks"),this.subChunks=e.subChunks.map((e=>new k(e)))}validMetaDataChunkId(){return"LIST"===this.id}getMetaData(){if(!this.validMetaDataChunkId())throw new e.ParseError("Unexpected chunk ID","'LIST'",`'${this.id}'`);const s=this.subChunks.reduce(((s,t)=>{if("ifil"===t.id||"iver"===t.id){if(t.length!==r.SF_VERSION_LENGTH)throw new e.ParseError(`Invalid size for the '${t.id}' sub-chunk`);s[t.id]=`${t.getInt16()}.${t.getInt16(2)}`}else s[t.id]=t.getString();return s}),{});if(!s.ifil)throw new e.ParseError("Missing required 'ifil' sub-chunk");if(!s.INAM)throw new e.ParseError("Missing required 'INAM' sub-chunk");return{version:s.ifil,soundEngine:s.isng||"EMU8000",name:s.INAM,rom:s.irom,romVersion:s.iver,creationDate:s.ICRD,author:s.IENG,product:s.IPRD,copyright:s.ICOP,comments:s.ICMT,createdBy:s.ISFT}}getSampleData(){if(!this.validMetaDataChunkId())throw new e.ParseError("Unexpected chunk ID","'LIST'",`'${this.id}'`);const s=this.subChunks[0];if("smpl"!==s.id)throw new e.ParseError("Invalid chunk signature","'smpl'",`'${s.id}'`);return new Uint8Array(s.buffer)}getPresetData(){if(!this.validMetaDataChunkId())throw new e.ParseError("Unexpected chunk ID","'LIST'",`'${this.id}'`);return{presetHeaders:n.getPresetHeaders(this.subChunks[0]),presetZones:h.getZones(this.subChunks[1],"pbag"),presetModulators:a.getModulators(this.subChunks[2],"pmod"),presetGenerators:u.getGenerators(this.subChunks[3],"pgen"),instrumentHeaders:t.getInstrumentHeaders(this.subChunks[4]),instrumentZones:h.getZones(this.subChunks[5],"ibag"),instrumentModulators:a.getModulators(this.subChunks[6],"imod"),instrumentGenerators:u.getGenerators(this.subChunks[7],"igen"),sampleHeaders:i.getSampleHeaders(this.subChunks[8])}}}exports.SF2Chunk=k;
//# sourceMappingURL=chunk.js.map
