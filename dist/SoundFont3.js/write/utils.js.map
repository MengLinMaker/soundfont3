{"version":3,"file":"utils.js","sources":["../../../src/write/utils.ts"],"sourcesContent":["import { MetaData } from '../types/metaData'\nimport { PresetData } from '../types/presetData'\nimport { Sample, SampleData } from '../types/sample'\n\nexport type SoundFont2Raw = {\n  metaData: MetaData\n  sampleData: SampleData\n  presetData: PresetData\n  samples: Sample[]\n}\n\n/**\n * Inserts a string into buffer at offset.\n * @param {DataView} view -DataView of a buffer.\n * @param {number} offset - offset in DataView.\n * @param {string} string - string to insert into DataView.\n */\nexport const dataViewWriteString = (view: DataView, offset: number, string: string) => {\n  for (let i = 0; i < string.length; i++) {\n    view.setUint8(offset + i, string.charCodeAt(i))\n  }\n}\n\n/**\n * Concats 2 ArrayBuffers\n * @param {ArrayBuffer} buffer1\n * @param {ArrayBuffer} buffer2\n * @return {Int8Array}\n */\nexport const concatBuffer = (buffer1: ArrayBuffer, buffer2: ArrayBuffer) => {\n  const tmp = new Int8Array(buffer1.byteLength + buffer2.byteLength)\n  tmp.set(new Int8Array(buffer1), 0)\n  tmp.set(new Int8Array(buffer2), buffer1.byteLength)\n  return new Int8Array(tmp.buffer)\n}\n"],"names":["buffer1","buffer2","tmp","Int8Array","byteLength","set","buffer","view","offset","string","i","length","setUint8","charCodeAt"],"mappings":"kCA6B4B,CAACA,EAAsBC,KACjD,MAAMC,EAAM,IAAIC,UAAUH,EAAQI,WAAaH,EAAQG,YAGhD,OAFPF,EAAIG,IAAI,IAAIF,UAAUH,GAAU,GAChCE,EAAIG,IAAI,IAAIF,UAAUF,GAAUD,EAAQI,YACjC,IAAID,UAAUD,EAAII,OAAM,8BAhBE,CAACC,EAAgBC,EAAgBC,KAClE,IAAA,IAASC,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IACjCH,EAAKK,SAASJ,EAASE,EAAGD,EAAOI,WAAWH,GAC9C"}