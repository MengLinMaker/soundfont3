{"version":3,"file":"toSoundFont3.js","sources":["../../../src/write/toSoundFont3.ts"],"sourcesContent":["import { SoundFont3 } from '../soundFont3'\nimport { writeSoundFont } from './writeSoundFont'\nimport { SampleHeader } from '../types/sample'\nimport { pcm16BufferToWav } from './convert'\nimport { SoundFont2Raw } from './utils'\nimport { Sample } from '../types/sample'\n\ntype ToSoundFont3Config =\n  | {\n      bitrate: 32 | 48 | 64 | 96 | 128 | 192 | 256\n      sampleRate: 16000 | 22050 | 24000 | 32000 | 44100 | 48000\n      oggCompressionAlgorithm: 'vorbis'\n    }\n  | {\n      bitrate: 32 | 48 | 64 | 96 | 128 | 192 | 256\n      sampleRate: 48000\n      oggCompressionAlgorithm: 'opus'\n    }\n\n/**\n * Convert samples to SF3\n */\nexport const toSoundFont3 = async (\n  _soundFont: SoundFont3,\n  config: ToSoundFont3Config = {\n    bitrate: 32,\n    sampleRate: 44100,\n    oggCompressionAlgorithm: 'vorbis'\n  },\n  folderPath = `soundfont-${crypto.randomUUID()}`\n) => {\n  if (typeof document !== 'undefined') throw Error('WebCodecs not supported yet.')\n\n  const { existsSync, mkdirSync, readFileSync, rmdirSync, unlinkSync, writeFileSync } =\n    await import('fs')\n  const { execSync } = await import('child_process')\n  if (!existsSync(folderPath)) mkdirSync(folderPath)\n\n  const soundFont = structuredClone(_soundFont) as never as SoundFont2Raw\n  const soundFontVersion = Number(soundFont.metaData.version)\n\n  let audioType = 'wav'\n  let sampleToBuffer = (sampleRate: number, data: Int16Array) => pcm16BufferToWav(sampleRate, data)\n  if (soundFontVersion >= 3 && soundFontVersion < 4) {\n    audioType = 'ogg'\n    sampleToBuffer = (_: number, data: Int16Array) => Buffer.from(data)\n  }\n\n  const sampleHeaders: SampleHeader[] = []\n  let sampleBuffer = Buffer.from('')\n  soundFont.samples.map((sample: Sample) => {\n    const fileName = `${folderPath}/${sample.header.name}`\n    const originalAudioBuffer = sampleToBuffer(\n      sample.header.sampleRate,\n      new Int16Array(sample.data)\n    )\n    writeFileSync(`${fileName}.${audioType}`, originalAudioBuffer)\n    execSync(\n      `ffmpeg -y -i \"${fileName}.${audioType}\" -ar ${config.sampleRate} -ab ${config.bitrate}k -acodec lib${config.oggCompressionAlgorithm} \"${fileName}.ogg\"`,\n      {\n        stdio: 'ignore'\n      }\n    )\n    const oggBuffer = readFileSync(`${fileName}.ogg`)\n    unlinkSync(`${fileName}.wav`)\n    unlinkSync(`${fileName}.ogg`)\n\n    const padBuffer = Buffer.from(new ArrayBuffer(2 - (oggBuffer.byteLength % 2)))\n    sample.header.start = sampleBuffer.byteLength\n    sample.header.end = sample.header.start + oggBuffer.byteLength\n    sample.header.startLoop -= sample.header.start\n    sample.header.endLoop -= sample.header.start\n    sampleHeaders.push(sample.header)\n    sampleBuffer = Buffer.concat([sampleBuffer, oggBuffer, padBuffer])\n  })\n  rmdirSync(folderPath)\n\n  soundFont.metaData.version = '3.1'\n  soundFont.sampleData = new Int16Array(sampleBuffer)\n  soundFont.presetData.sampleHeaders = sampleHeaders\n  return new SoundFont3(Buffer.from(writeSoundFont(soundFont)))\n}\n"],"names":["async","_soundFont","config","bitrate","sampleRate","oggCompressionAlgorithm","folderPath","crypto","randomUUID","document","Error","existsSync","mkdirSync","readFileSync","rmdirSync","unlinkSync","writeFileSync","import","execSync","soundFont","structuredClone","soundFontVersion","Number","metaData","version","audioType","sampleToBuffer","data","pcm16BufferToWav","_","Buffer","from","sampleHeaders","sampleBuffer","samples","map","sample","fileName","header","name","originalAudioBuffer","Int16Array","stdio","oggBuffer","padBuffer","ArrayBuffer","byteLength","start","end","startLoop","endLoop","push","concat","sampleData","presetData","SoundFont3","writeSoundFont"],"mappings":"wIAsB4BA,MAC1BC,EACAC,EAA6B,CAC3BC,QAAS,GACTC,WAAY,MACZC,wBAAyB,UAE3BC,EAAa,aAAaC,OAAOC,kBAEjC,GAAwB,oBAAbC,SAA0B,MAAMC,MAAM,gCAE3C,MAAAC,WAAEA,EAAYC,UAAAA,EAAAC,aAAWA,EAAcC,UAAAA,EAAAC,WAAWA,gBAAYC,SAC5DC,OAAO,OACTC,SAAEA,SAAmBD,OAAO,iBAC7BN,EAAWL,MAAuBA,GAEjC,MAAAa,EAAYC,gBAAgBnB,GAC5BoB,EAAmBC,OAAOH,EAAUI,SAASC,SAEnD,IAAIC,EAAY,MACZC,EAAiB,CAACtB,EAAoBuB,IAAqBC,EAAAA,iBAAiBxB,EAAYuB,GACxFN,GAAoB,GAAKA,EAAmB,IAClCI,EAAA,MACZC,EAAiB,CAACG,EAAWF,IAAqBG,OAAOC,KAAKJ,IAGhE,MAAMK,EAAgC,GAClC,IAAAC,EAAeH,OAAOC,KAAK,IA+B/B,OA9BUZ,EAAAe,QAAQC,KAAKC,IACrB,MAAMC,EAAW,GAAG/B,KAAc8B,EAAOE,OAAOC,OAC1CC,EAAsBd,EAC1BU,EAAOE,OAAOlC,WACd,IAAIqC,WAAWL,EAAOT,OAExBX,EAAc,GAAGqB,KAAYZ,IAAae,GAC1CtB,EACE,iBAAiBmB,KAAYZ,UAAkBvB,EAAOE,kBAAkBF,EAAOC,uBAAuBD,EAAOG,4BAA4BgC,SACzI,CACEK,MAAO,WAGX,MAAMC,EAAY9B,EAAa,GAAGwB,SACvBtB,EAAA,GAAGsB,SACHtB,EAAA,GAAGsB,SAER,MAAAO,EAAYd,OAAOC,KAAK,IAAIc,YAAY,EAAKF,EAAUG,WAAa,IACnEV,EAAAE,OAAOS,MAAQd,EAAaa,WACnCV,EAAOE,OAAOU,IAAMZ,EAAOE,OAAOS,MAAQJ,EAAUG,WAC7CV,EAAAE,OAAOW,WAAab,EAAOE,OAAOS,MAClCX,EAAAE,OAAOY,SAAWd,EAAOE,OAAOS,MACzBf,EAAAmB,KAAKf,EAAOE,QAC1BL,EAAeH,OAAOsB,OAAO,CAACnB,EAAcU,EAAWC,GAAU,IAEnE9B,EAAUR,GAEVa,EAAUI,SAASC,QAAU,MACnBL,EAAAkC,WAAa,IAAIZ,WAAWR,GACtCd,EAAUmC,WAAWtB,cAAgBA,EAC9B,IAAIuB,EAAWA,WAAAzB,OAAOC,KAAKyB,EAAAA,eAAerC,IAAW"}