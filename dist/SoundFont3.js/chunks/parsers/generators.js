"use strict";var e=require("../../riff/parseError.js"),r=require("../../types/generator.js");require("../../types/modulator.js");var t=require("../../constants.js");const n=[r.GeneratorType.StartAddrsOffset,r.GeneratorType.EndAddrsOffset,r.GeneratorType.StartLoopAddrsOffset,r.GeneratorType.EndLoopAddrsOffset,r.GeneratorType.StartAddrsCoarseOffset,r.GeneratorType.EndAddrsCoarseOffset,r.GeneratorType.StartLoopAddrsCoarseOffset,r.GeneratorType.KeyNum,r.GeneratorType.Velocity,r.GeneratorType.EndLoopAddrsCoarseOffset,r.GeneratorType.SampleModes,r.GeneratorType.ExclusiveClass,r.GeneratorType.OverridingRootKey],o=[r.GeneratorType.Unused1,r.GeneratorType.Unused2,r.GeneratorType.Unused3,r.GeneratorType.Unused4,r.GeneratorType.Reserved1,r.GeneratorType.Reserved2,r.GeneratorType.Reserved3],s=[r.GeneratorType.KeyRange,r.GeneratorType.VelRange];exports.getGenerators=(a,d)=>{if(a.id!==d)throw new e.ParseError("Unexpected chunk ID",`'${d}'`,`'${a.id}'`);if(a.length%t.SF_GENERATOR_SIZE)throw new e.ParseError(`Invalid size for the '${d}' sub-chunk`);return a.iterate((e=>{const t=e.getInt16();return r.GeneratorType[t]?"pgen"===d&&n.includes(t)||"igen"===d&&o.includes(t)?null:s.includes(t)?{id:t,range:{lo:e.getByte(),hi:e.getByte()}}:{id:t,value:e.getInt16BE()}:null}))};
//# sourceMappingURL=generators.js.map
