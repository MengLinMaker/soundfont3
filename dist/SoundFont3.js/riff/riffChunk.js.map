{"version":3,"file":"riffChunk.js","sources":["../../../src/riff/riffChunk.ts"],"sourcesContent":["import { ChunkIterator } from './chunkIterator'\nimport { getStringFromBuffer } from './utils'\n\nexport class RIFFChunk {\n  /**\n   * The chunk ID (fourCC).\n   */\n  public readonly id: string\n\n  /**\n   * The length of the chunk.\n   */\n  public readonly length: number\n\n  /**\n   * The raw buffer of the chunk.\n   */\n  public readonly buffer: Uint8Array\n\n  /**\n   * The sub-chunks of the chunk. If the chunk is not a RIFF or LIST chunk, this will be an empty\n   * array.\n   */\n  public readonly subChunks: RIFFChunk[]\n\n  public constructor(id: string, length: number, buffer: Uint8Array, subChunks: RIFFChunk[]) {\n    this.id = id\n    this.length = length\n    this.buffer = buffer\n    this.subChunks = subChunks\n  }\n\n  /**\n   * Get a string from the buffer. If no position and no length is specified, it returns the whole\n   * buffer as a string.\n   *\n   * @param {number} [position]\n   * @param {number} [length]\n   */\n  public getString(position: number = 0, length?: number): string {\n    return getStringFromBuffer(this.getBuffer(position, length || this.length - position))\n  }\n\n  /**\n   * Get a signed 16-bit integer from the buffer.\n   *\n   * @param {number} [position]\n   */\n  public getInt16(position: number = 0): number {\n    return this.buffer[position++] | (this.buffer[position] << 8)\n  }\n\n  /**\n   * Get an unsigned 32-bit integer from the buffer.\n   *\n   * @param {number} [position]\n   */\n  public getUInt32(position: number = 0): number {\n    return (\n      (this.buffer[position++] |\n        (this.buffer[position++] << 8) |\n        (this.buffer[position++] << 16) |\n        (this.buffer[position] << 24)) >>>\n      0\n    )\n  }\n\n  /**\n   * Get a byte from the buffer.\n   *\n   * @param {number} [position]\n   */\n  public getByte(position: number = 0): number {\n    return this.buffer[position]\n  }\n\n  /**\n   * Get a char from the buffer.\n   *\n   * @param {number} [position]\n   */\n  public getChar(position: number = 0): number {\n    return (this.buffer[position] << 24) >> 24\n  }\n\n  /**\n   * Get a chunk iterator for the chunk.\n   *\n   * @param {number} [start] - The position where to start iterating. Defaults to 0.\n   */\n  public iterator<T>(start: number = 0): ChunkIterator<T> {\n    return new ChunkIterator<T>(this, start)\n  }\n\n  /**\n   * Utility function to quickly iterate over a function.\n   *\n   * @template T\n   * @param {(iterator: ChunkIterator): T} callback - The callback that returns an instance of the\n   *   specified return type\n   * @param {number} [start] - The optional index where to start iterating over the chunk\n   */\n  public iterate<T>(callback: (iterator: ChunkIterator<T>) => T | null, start: number = 0): T[] {\n    const iterator = new ChunkIterator<T>(this, start)\n    iterator.iterate(callback)\n    return iterator.target\n  }\n\n  /**\n   * Get a buffer from `start` to `start` + `length`. The buffer is not copied (e.g. when using\n   * .slice()), so any modifications to the buffer are done to the original buffer too.\n   *\n   * @param {number} start\n   * @param {number} length\n   */\n  private getBuffer(start: number, length: number): Uint8Array {\n    return this.buffer.subarray(start, start + length)\n  }\n}\n"],"names":["constructor","id","length","buffer","subChunks","__publicField","this","getString","position","getStringFromBuffer","getBuffer","getInt16","getUInt32","getByte","getChar","iterator","start","ChunkIterator","iterate","callback","target","subarray"],"mappings":"iPAGO,MAsBE,WAAAA,CAAYC,EAAYC,EAAgBC,EAAoBC,GAlBnDC,EAAAC,KAAA,MAKAD,EAAAC,KAAA,UAKAD,EAAAC,KAAA,UAMAD,EAAAC,KAAA,aAGdA,KAAKL,GAAKA,EACVK,KAAKJ,OAASA,EACdI,KAAKH,OAASA,EACdG,KAAKF,UAAYA,CACnB,CASO,SAAAG,CAAUC,EAAmB,EAAGN,GAC9B,OAAAO,EAAAA,oBAAoBH,KAAKI,UAAUF,EAAUN,GAAUI,KAAKJ,OAASM,GAC9E,CAOO,QAAAG,CAASH,EAAmB,GACjC,OAAOF,KAAKH,OAAOK,KAAeF,KAAKH,OAAOK,IAAa,CAC7D,CAOO,SAAAI,CAAUJ,EAAmB,GAClC,OACGF,KAAKH,OAAOK,KACVF,KAAKH,OAAOK,MAAe,EAC3BF,KAAKH,OAAOK,MAAe,GAC3BF,KAAKH,OAAOK,IAAa,MAC5B,CAEJ,CAOO,OAAAK,CAAQL,EAAmB,GACzB,OAAAF,KAAKH,OAAOK,EACrB,CAOO,OAAAM,CAAQN,EAAmB,GAChC,OAAQF,KAAKH,OAAOK,IAAa,IAAO,EAC1C,CAOO,QAAAO,CAAYC,EAAgB,GAC1B,OAAA,IAAIC,EAAiBA,cAAAX,KAAMU,EACpC,CAUO,OAAAE,CAAWC,EAAoDH,EAAgB,GACpF,MAAMD,EAAW,IAAIE,EAAAA,cAAiBX,KAAMU,GAE5C,OADAD,EAASG,QAAQC,GACVJ,EAASK,MAClB,CASQ,SAAAV,CAAUM,EAAed,GAC/B,OAAOI,KAAKH,OAAOkB,SAASL,EAAOA,EAAQd,EAC7C"}