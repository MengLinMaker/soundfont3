"use strict";var t=require("./chunkIterator.js"),e=require("./utils.js"),r=Object.defineProperty,u=(t,e,u)=>((t,e,u)=>e in t?r(t,e,{enumerable:!0,configurable:!0,writable:!0,value:u}):t[e]=u)(t,"symbol"!=typeof e?e+"":e,u);exports.RIFFChunk=class{constructor(t,e,r,s){u(this,"id"),u(this,"length"),u(this,"buffer"),u(this,"subChunks"),this.id=t,this.length=e,this.buffer=r,this.subChunks=s}getString(t=0,r){return e.getStringFromBuffer(this.getBuffer(t,r||this.length-t))}getInt16(t=0){return this.buffer[t++]|this.buffer[t]<<8}getUInt32(t=0){return(this.buffer[t++]|this.buffer[t++]<<8|this.buffer[t++]<<16|this.buffer[t]<<24)>>>0}getByte(t=0){return this.buffer[t]}getChar(t=0){return this.buffer[t]<<24>>24}iterator(e=0){return new t.ChunkIterator(this,e)}iterate(e,r=0){const u=new t.ChunkIterator(this,r);return u.iterate(e),u.target}getBuffer(t,e){return this.buffer.subarray(t,t+e)}};
//# sourceMappingURL=riffChunk.js.map
